swagger: "2.0"
info:
  title: CMS APIs for TV.
  description: These APIs are to be used to configure various components to be rendered on the UI for TV.
  version: 1.0.0
host: api.example.com
tags:
  - name: "category"
    description: "CRUD APIs for Category"
  - name: "page"
    description: "CRUD APIs for Page"
  - name: "component"
    description: "CRUD APIs for Component"
  - name: "endpoint"
    description: "CRUD APIs for Endpoint"
  - name: "endpoint params"
    description: "CRUD APIs for Endpoint Params"
  - name: "component endpoint"
    description: "CRUD APIs for Component Endpoint Mappings"
  - name: "page component"
    description: "CRUD APIs for Page Component Mappings"

schemes:
  - https
  - http

paths:
  #############################################################################
  #Category APIs
  #############################################################################
  /rest/api/v1/cagtegories:
    get:
      tags:
        - "category"
      summary: "Get all the categories."
      description: "Get all the categories."
      operationId: "getAllCategories"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              default_category_id:
                type: "integer"
                example: "1"
              items:
                type: "array"
                items:
                  $ref: "#/definitions/CategoryResponse"
        401:
          description: "Unauthorized"

    post:
      tags:
        - "category"
      summary: "Add a new category."
      description: "Add a new category."
      operationId: "addCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Category Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Category"
            properties:
              is_root:
                type: "boolean"
                default: "false"
                example:
                  "true"
                description: "If set true, already set is_root will be removed as per current use case."
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/CategoryResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/cagtegories/{id}:
    get:
      tags:
        - "category"
      summary: "Get category by id."
      description: "Get category by id."
      operationId: "getCategoryById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the category"
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/CategoryResponse"
        404:
          description: "No categories found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "category"
      summary: "Updates an existing category."
      description: "Updates an existing category."
      operationId: "updateCategoryById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Category Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Category"
            properties:
              is_root:
                type: "boolean"
                default: "false"
                example:
                  "true"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/CategoryResponse"
        404:
          description: "Category ID not found"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - "category"
      summary: "Deletes a category."
      description: "Deletes a category."
      operationId: "deleteCategoryById"
      produces:
        - "application/json"
      responses:
        401:
          description: "Default Category can not be deleted"
        404:
          description: "Category ID not found"

  #############################################################################
  #Page APIs
  #############################################################################
  /rest/api/v1/pages:
    get:
      tags:
        - "page"
      summary: "Get all the pages."
      description: "Get all the pages."
      operationId: "getAllPages"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/definitions/PageResponse"
        401:
          description: "Unauthorized"

    post:
      tags:
        - "page"
      summary: "Add a new page."
      description: "Add a new page."
      operationId: "addPage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Page Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Page"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/PageResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/pages/{id}:
    get:
      tags:
        - "page"
      summary: "Get page by id."
      description: "Get page by id."
      operationId: "getPageById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the page"
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/PageResponse"
        404:
          description: "No pages found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "page"
      summary: "Updates an existing page."
      description: "Updates an existing page."
      operationId: "updatePageById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the page"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          description: "Page Object that need to be updated"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Page"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/PageResponse"
        404:
          description: "Page with the given id not found"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - "page"
      summary: "Deletes a page."
      description: "Deletes a page."
      operationId: "deletePageById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the page"
          required: true
          type: "integer"
      produces:
        - "application/json"
      responses:
        401:
          description: "Page can not be deleted till referenced by a category"
        404:
          description: "Page ID not found"

  #############################################################################
  #Component APIs
  #############################################################################
  /rest/api/v1/components:
    get:
      tags:
        - "component"
      summary: "Get all the components."
      description: "Get all the components."
      operationId: "getAllComponents"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/definitions/ComponentResponse"
        401:
          description: "Unauthorized"
    post:
      tags:
        - "component"
      summary: "Add a new component."
      description: "Add a new component."
      operationId: "addComponent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Component Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Component"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/ComponentResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/components/{id}:
    get:
      tags:
        - "component"
      summary: "Get component by id."
      description: "Get component by id."
      operationId: "getComponentById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the component"
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/ComponentResponse"
        404:
          description: "No components found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "component"
      summary: "Updates an existing component."
      description: "Updates an existing component."
      operationId: "updateComponentById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the component"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Component Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Component"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/ComponentResponse"
        404:
          description: "Component with the given id not found"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - "component"
      summary: "Deletes a component."
      description: "Deletes a component."
      operationId: "deleteComponentById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the component"
          required: true
          type: "integer"
      responses:
        400:
          description: "Invalid ID supplied"
        401:
          description: "Component can not be deleted till referenced by a page"
        404:
          description: "Component ID not found"

  #############################################################################
  #Endpoint APIs
  #############################################################################
  /rest/api/v1/endpoints:
    get:
      tags:
        - "endpoint"
      summary: "Get all the endpoints."
      description: "Get all the endpoints."
      operationId: "getAllEndpoints"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/definitions/EndpointResponse"
        401:
          description: "Unauthorized"
    post:
      tags:
        - "endpoint"
      summary: "Add a new endpoint."
      description: "Add a new endpoint."
      operationId: "addEndpoint"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Endpoint Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Endpoint"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/EndpointResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/endpoints/{id}:
    get:
      tags:
        - "endpoint"
      summary: "Get endpoint by id."
      description: "Get endpoint by id."
      operationId: "getEndpointById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the endpoint"
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/EndpointResponse"
        404:
          description: "No endpoints found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "endpoint"
      summary: "Updates an existing endpoint."
      description: "Updates an existing endpoint."
      operationId: "updateEndpointById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the endpoint"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Endpoint Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Endpoint"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/EndpointResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Endpoint with the given id not found"

    delete:
      tags:
        - "endpoint"
      summary: "Deletes an endpoint."
      description: "Deletes an endpoint."
      operationId: "deleteEndpointById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the endpoint"
          required: true
          type: "integer"
      responses:
        401:
          description: "Endpoint can not be deleted till referenced by a component"
        404:
          description: "Endpoint ID not found"

  #############################################################################
  #Endpoint Source Params APIs
  #############################################################################
  /rest/api/v1/endpoints/params:
    get:
      tags:
        - "endpoint params"
      summary: "Get all the endpoint params."
      description: "Get all the endpoint params."
      operationId: "getAllEndpointParams"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/definitions/EndpointParamsResponse"
        401:
          description: "Unauthorized"
    post:
      tags:
        - "endpoint params"
      summary: "Add a new endpoint params."
      description: "Add a new endpoint params."
      operationId: "addEndpointParams"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Endpoint Params Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/EndpointParams"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/EndpointParamsResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/endpoints/params/{id}:
    get:
      tags:
        - "endpoint params"
      summary: "Get endpoint params by id."
      description: "Get endpoint params by id."
      operationId: "getEndpointParamsById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the endpoint params"
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/EndpointParamsResponse"
        404:
          description: "No endpoint params found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "endpoint params"
      summary: "Updates an existing endpoint params."
      description: "Updates an existing endpoint params."
      operationId: "updateEndpointParamsById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the endpoint params"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Endpoint Params Object that need to be added"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/EndpointParams"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/EndpointParamsResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Endpoint Params with the given id not found"

    delete:
      tags:
        - "endpoint params"
      summary: "Deletes an endpoint params."
      description: "Deletes an endpoint params."
      operationId: "deleteEndpointParamsById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the endpoint params"
          required: true
          type: "integer"
      responses:
        401:
          description: "Endpoint Params can not be deleted till referenced by a endpoint or component"
        404:
          description: "Endpoint Params ID not found"

  #############################################################################
  #COMPONENT ENDPOINTS MAPPING APIs
  #############################################################################
  /rest/api/v1/components/endpoints:
    get:
      tags:
        - "component endpoint"
      summary: "Get all the component endpoint mappings."
      description: "Get all the component endpoint mappings."
      operationId: "getAllComponentEndpointMappings"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/definitions/ComponentEndpointResponse"
        401:
          description: "Unauthorized"
    post:
      tags:
        - "component endpoint"
      summary: "Add a new component endpoint mapping."
      description: "Add a new component endpoint mapping."
      operationId: "addComponentEndpointMapping"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/ComponentEndpoint"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/ComponentEndpointResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/components/endpoints/{id}:
    get:
      tags:
        - "component endpoint"
      summary: "Get component endpoint mapping by id."
      description: "Get component endpoint mapping by id."
      operationId: "getComponentEndpointMappingById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the component endpoint mapping."
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/ComponentEndpointResponse"
        404:
          description: "No component endpoint mapping found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "component endpoint"
      summary: "Updates an existing component endpoint mapping."
      description: "Updates an existing component endpoint mapping."
      operationId: "updateComponentEndpointMappingById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the component endpoint mapping."
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/ComponentEndpoint"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/ComponentEndpointResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "component endpoint mappings with the given id not found."

    delete:
      tags:
        - "component endpoint"
      summary: "Deletes a component endpoint mapping."
      description: "Deletes a component endpoint mapping."
      operationId: "deleteComponentEndpointMappingById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the component endpoint mapping"
          required: true
          type: "integer"
      responses:
        401:
          description: "component endpoint mapping can not be deleted till referenced by a component and endpoint"
        404:
          description: "component endpoint mapping ID not found"

  #############################################################################
  #PAGE COMPONENT MAPPING APIs
  #############################################################################
  /rest/api/v1/pages/components:
    get:
      tags:
        - "page component"
      summary: "Get all the page component mappings."
      description: "Get all the page component mappings."
      operationId: "getAllPageComponentMappings"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/definitions/PageComponentResponse"
        401:
          description: "Unauthorized"
    post:
      tags:
        - "page component"
      summary: "Add a new page component mapping."
      description: "Add a new page component mapping."
      operationId: "addPageComponentMapping"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/PageComponent"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/PageComponentResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"

  /rest/api/v1/pages/components/{id}:
    get:
      tags:
        - "page component"
      summary: "Get page component mapping by id."
      description: "Get component endpoint mapping by id."
      operationId: "getPageComponentMappingById"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the page component mapping."
          required: true
          type: "integer"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/PageComponentResponse"
        404:
          description: "No page component mapping found"
        401:
          description: "Unauthorized"

    put:
      tags:
        - "page component"
      summary: "Updates an existing page component mapping."
      description: "Updates an existing page component mapping."
      operationId: "updatePageComponentMappingById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the page component mapping."
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/PageComponent"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            $ref: "#/definitions/PageComponentResponse"
        401:
          description: "Validations Failed"
          schema:
            type: "object"
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "page component mapping with the given id not found."

    delete:
      tags:
        - "page component"
      summary: "Deletes a page component mapping."
      description: "Deletes a page component mapping."
      operationId: "deletePageComponentMappingById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the page component mapping"
          required: true
          type: "integer"
      responses:
        401:
          description: "page component mapping can not be deleted till referenced by a page and component"
        404:
          description: "page component mapping ID not found"


definitions:
  Category:
    type: "object"
    properties:
      name:
        type: "string"
        example:
          "home"
      title:
        type: "string"
        example:
          "Home"
      is_default:
        type: "boolean"
        example:
          "true"
      description:
        type: "string"
        example:
          "Home Page Tab"
        default: "null"
      cta_id:
        type: "integer"
        default: "null"
        example: "1"
      page_id:
        type: "integer"
        default: "null"
        example: "1"
    xml:
      name: "Category"

  Page:
    type: "object"
    properties:
      name:
        type: "string"
        example:
          "home"
      title:
        type: "string"
        example:
          "Home"
      type:
        type: "string"
        enum:
          - "PAGE"
          - "SUBPAGE"
        example:
          "PAGE"
      description:
        type: "string"
        example:
          "Home Page"
        default: "null"
      component_ids:
        type: "array"
        minItems: 1
        items:
          type: "integer"
          format: "int64"
          example:
            "1"
    xml:
      name: "Page"

  Component:
    type: "object"
    properties:
      name:
        type: "string"
        example:
          "home"
      title:
        type: "string"
        example:
          "Home"
      source:
        type: "string"
        enum:
          - "BFF"
          - "MK"
        example:
          "BFF"
        default: "null"
      description:
        type: "string"
        example:
          "Hollywood Movies Component"
        default: "null"
      cta_id:
        type: "integer"
        example:
          "1"
    xml:
      name: "Component"

  Endpoint:
    type: "object"
    properties:
      name:
        type: "string"
        example:
          "MK Hollywood Movies"
      source:
        type: "string"
        example:
          "BFF"
        default: "null"
      type:
        type: "string"
        example:
          "rail"
        default: "null"
      url:
        type: "string"
        example:
          "BFF"
        default: "null"
      method:
        type: "string"
        enum:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        example:
          "GET"
        default: "null"
      description:
        type: "string"
        example:
          "Hollywood Movies Endpoint"
        default: "null"
      cta_id:
        type: "integer"
        example:
          "1"
    xml:
      name: "Endpoint"

  EndpointParams:
    type: "object"
    properties:
      name:
        type: "string"
        example:
          "mkParams"
      params:
        type: "string"
        example:
          "{}"
        default: "null"
      description:
        type: "string"
        example:
          "Params for MK Hollywood Movies API enpoint"
        default: "null"
      component_id:
        type: "integer"
        example:
          "1"
      endpoint_id:
        type: "integer"
        example:
          "1"
    xml:
      name: "EndpointParams"

  ComponentEndpoint:
    type: "object"
    properties:
      component_id:
        type: "integer"
        example:
          "1"
      endpoint_id:
        type: "integer"
        example:
          "1"
    xml:
      name: "ComponentEndpoint"

  PageComponent:
    type: "object"
    properties:
      page_id:
        type: "integer"
        example:
          "1"
      component_id:
        type: "integer"
        example:
          "1"
      order:
        type: "integer"
        example:
          "1"
    xml:
      name: "PageComponent"

  PageResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/Page"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "PageResponse"

  CategoryResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/Category"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "CategoryResponse"

  ComponentResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/Component"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "ComponentResponse"

  EndpointResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/Endpoint"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "EndpointResponse"

  EndpointParamsResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/EndpointParams"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "EndpointParamsResponse"

  ComponentEndpointResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/ComponentEndpoint"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "ComponentsEndpointsResponse"

  PageComponentResponse:
    type: "object"
    allOf:
      - $ref: "#/definitions/PageComponent"
    properties:
      id:
        type: "integer"
        format: "int64"
        example:
          "1"
    xml:
      name: "PageComponentResponse"

  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "string"
        example:
          "ER-101"
      message:
        type: "string"
        example:
          "Bad Request"
      details:
        type: "array"
        items:
          type: "string"
          example:
            "Category Name Already Exists"
    xml:
      name: "ErrorResponse"